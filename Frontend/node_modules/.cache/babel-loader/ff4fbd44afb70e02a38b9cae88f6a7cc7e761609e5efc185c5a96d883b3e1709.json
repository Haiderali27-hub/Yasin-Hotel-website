{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Yasin Heaven Star Hotel\\\\Frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { authUtils } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requireAuth = true,\n  redirectTo = '/login',\n  requireAdmin = false\n}) => {\n  _s();\n  const location = useLocation();\n  const isUserAuthenticated = authUtils.isAuthenticated();\n  const isAdminAuthenticated = localStorage.getItem('adminToken') && localStorage.getItem('userType') === 'admin';\n\n  // For admin routes\n  if (location.pathname.startsWith('/admin')) {\n    if (requireAuth && !isAdminAuthenticated) {\n      // Admin route requires authentication but admin is not logged in\n      alert('Please log in as an administrator to access this page.');\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/admin/login\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }, this);\n    }\n    if (!requireAuth && isAdminAuthenticated) {\n      // Admin trying to access admin login while already logged in\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/admin\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Check if a regular user is trying to access admin routes\n    if (isUserAuthenticated && !isAdminAuthenticated) {\n      alert('You are logged in as a user. Please logout first to access admin panel.');\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 14\n      }, this);\n    }\n  } else {\n    // For regular user routes\n    if (requireAuth && !isUserAuthenticated) {\n      // Save the intended destination before redirecting to login\n      localStorage.setItem('redirectAfterLogin', location.pathname);\n      alert('Please log in to access this page. You will be redirected back after login.');\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: redirectTo,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }, this);\n    }\n    if (!requireAuth && isUserAuthenticated) {\n      // If user is already authenticated and trying to access auth pages, redirect to home\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this);\n    }\n  }\n  return children;\n};\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","useLocation","authUtils","jsxDEV","_jsxDEV","ProtectedRoute","children","requireAuth","redirectTo","requireAdmin","_s","location","isUserAuthenticated","isAuthenticated","isAdminAuthenticated","localStorage","getItem","pathname","startsWith","alert","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","setItem","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/Yasin Heaven Star Hotel/Frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\nimport { authUtils } from '../services/api';\n\nconst ProtectedRoute = ({ children, requireAuth = true, redirectTo = '/login', requireAdmin = false }) => {\n  const location = useLocation();\n  const isUserAuthenticated = authUtils.isAuthenticated();\n  const isAdminAuthenticated = localStorage.getItem('adminToken') && localStorage.getItem('userType') === 'admin';\n  \n  // For admin routes\n  if (location.pathname.startsWith('/admin')) {\n    if (requireAuth && !isAdminAuthenticated) {\n      // Admin route requires authentication but admin is not logged in\n      alert('Please log in as an administrator to access this page.');\n      return <Navigate to=\"/admin/login\" replace />;\n    }\n    \n    if (!requireAuth && isAdminAuthenticated) {\n      // Admin trying to access admin login while already logged in\n      return <Navigate to=\"/admin\" replace />;\n    }\n    \n    // Check if a regular user is trying to access admin routes\n    if (isUserAuthenticated && !isAdminAuthenticated) {\n      alert('You are logged in as a user. Please logout first to access admin panel.');\n      return <Navigate to=\"/\" replace />;\n    }\n  } else {\n    // For regular user routes\n    if (requireAuth && !isUserAuthenticated) {\n      // Save the intended destination before redirecting to login\n      localStorage.setItem('redirectAfterLogin', location.pathname);\n      alert('Please log in to access this page. You will be redirected back after login.');\n      return <Navigate to={redirectTo} replace />;\n    }\n    \n    if (!requireAuth && isUserAuthenticated) {\n      // If user is already authenticated and trying to access auth pages, redirect to home\n      return <Navigate to=\"/\" replace />;\n    }\n  }\n  \n  return children;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,WAAW,GAAG,IAAI;EAAEC,UAAU,GAAG,QAAQ;EAAEC,YAAY,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACxG,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,mBAAmB,GAAGV,SAAS,CAACW,eAAe,CAAC,CAAC;EACvD,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,OAAO;;EAE/G;EACA,IAAIL,QAAQ,CAACM,QAAQ,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;IAC1C,IAAIX,WAAW,IAAI,CAACO,oBAAoB,EAAE;MACxC;MACAK,KAAK,CAAC,wDAAwD,CAAC;MAC/D,oBAAOf,OAAA,CAACJ,QAAQ;QAACoB,EAAE,EAAC,cAAc;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC/C;IAEA,IAAI,CAAClB,WAAW,IAAIO,oBAAoB,EAAE;MACxC;MACA,oBAAOV,OAAA,CAACJ,QAAQ;QAACoB,EAAE,EAAC,QAAQ;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACzC;;IAEA;IACA,IAAIb,mBAAmB,IAAI,CAACE,oBAAoB,EAAE;MAChDK,KAAK,CAAC,yEAAyE,CAAC;MAChF,oBAAOf,OAAA,CAACJ,QAAQ;QAACoB,EAAE,EAAC,GAAG;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpC;EACF,CAAC,MAAM;IACL;IACA,IAAIlB,WAAW,IAAI,CAACK,mBAAmB,EAAE;MACvC;MACAG,YAAY,CAACW,OAAO,CAAC,oBAAoB,EAAEf,QAAQ,CAACM,QAAQ,CAAC;MAC7DE,KAAK,CAAC,6EAA6E,CAAC;MACpF,oBAAOf,OAAA,CAACJ,QAAQ;QAACoB,EAAE,EAAEZ,UAAW;QAACa,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC7C;IAEA,IAAI,CAAClB,WAAW,IAAIK,mBAAmB,EAAE;MACvC;MACA,oBAAOR,OAAA,CAACJ,QAAQ;QAACoB,EAAE,EAAC,GAAG;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpC;EACF;EAEA,OAAOnB,QAAQ;AACjB,CAAC;AAACI,EAAA,CAvCIL,cAAc;EAAA,QACDJ,WAAW;AAAA;AAAA0B,EAAA,GADxBtB,cAAc;AAyCpB,eAAeA,cAAc;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}