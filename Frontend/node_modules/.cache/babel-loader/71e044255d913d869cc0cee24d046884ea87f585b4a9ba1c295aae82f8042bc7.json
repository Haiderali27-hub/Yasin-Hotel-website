{"ast":null,"code":"import axios from'axios';// Create axios instance with base configuration\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5000/api',timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/admin/login';}return Promise.reject(error);});// Room APIs\nexport const roomAPI={// Get all rooms\ngetAllRooms:()=>api.get('/rooms'),// Get room by ID\ngetRoomById:id=>api.get(\"/rooms/\".concat(id)),// Create new room (admin only)\ncreateRoom:roomData=>api.post('/rooms',roomData),// Update room (admin only)\nupdateRoom:(id,roomData)=>api.put(\"/rooms/\".concat(id),roomData),// Delete room (admin only)\ndeleteRoom:id=>api.delete(\"/rooms/\".concat(id)),// Get available rooms for dates\ngetAvailableRooms:(checkIn,checkOut)=>api.get(\"/rooms?checkIn=\".concat(checkIn,\"&checkOut=\").concat(checkOut))};// Booking APIs\nexport const bookingAPI={// Create new booking\ncreateBooking:bookingData=>api.post('/bookings',bookingData),// Get user bookings\ngetUserBookings:()=>api.get('/bookings/my-bookings'),// Get all bookings (admin only)\ngetAllBookings:()=>api.get('/bookings'),// Update booking status (admin only)\nupdateBookingStatus:(id,status)=>api.put(\"/bookings/\".concat(id,\"/status\"),{status}),// Cancel booking\ncancelBooking:id=>api.put(\"/bookings/\".concat(id,\"/cancel\")),// Get booking by ID\ngetBookingById:id=>api.get(\"/bookings/\".concat(id))};// User APIs\nexport const userAPI={// Register user\nregister:userData=>api.post('/users/register',userData),// Login user\nlogin:credentials=>api.post('/users/login',credentials),// Get user profile\ngetProfile:()=>api.get('/users/profile'),// Update user profile\nupdateProfile:userData=>api.put('/users/profile',userData),// Get all users (admin only)\ngetAllUsers:()=>api.get('/users'),// Delete user (admin only)\ndeleteUser:id=>api.delete(\"/users/\".concat(id))};// Admin APIs\nexport const adminAPI={// Admin login\nlogin:credentials=>api.post('/admin/login',credentials),// Get admin profile\ngetProfile:()=>api.get('/admin/profile'),// Dashboard stats\ngetDashboardStats:()=>api.get('/admin/dashboard/stats')};// Gallery APIs\nexport const galleryAPI={// Get all gallery images\ngetAllImages:()=>api.get('/gallery'),// Upload new image (admin only)\nuploadImage:formData=>api.post('/gallery',formData,{headers:{'Content-Type':'multipart/form-data'}}),// Delete image (admin only)\ndeleteImage:id=>api.delete(\"/gallery/\".concat(id)),// Update image (admin only)\nupdateImage:(id,imageData)=>api.put(\"/gallery/\".concat(id),imageData)};// Auth utilities\nexport const authUtils={getToken:()=>localStorage.getItem('token'),setToken:token=>localStorage.setItem('token',token),removeToken:()=>localStorage.removeItem('token'),isAuthenticated:()=>{const token=localStorage.getItem('token');return!!token;// Convert to boolean\n}};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}