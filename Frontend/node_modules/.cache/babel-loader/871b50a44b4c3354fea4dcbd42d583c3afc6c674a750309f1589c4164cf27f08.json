{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/admin/login';\n  }\n  return Promise.reject(error);\n});\n\n// Room APIs\nexport const roomAPI = {\n  // Get all rooms\n  getAllRooms: () => api.get('/rooms'),\n  // Get room by ID\n  getRoomById: id => api.get(`/rooms/${id}`),\n  // Create new room (admin only)\n  createRoom: roomData => api.post('/rooms', roomData),\n  // Update room (admin only)\n  updateRoom: (id, roomData) => api.put(`/rooms/${id}`, roomData),\n  // Delete room (admin only)\n  deleteRoom: id => api.delete(`/rooms/${id}`),\n  // Get available rooms for dates\n  getAvailableRooms: (checkIn, checkOut) => api.get(`/rooms?checkIn=${checkIn}&checkOut=${checkOut}`)\n};\n\n// Booking APIs\nexport const bookingAPI = {\n  // Create new booking\n  createBooking: bookingData => api.post('/bookings', bookingData),\n  // Get user bookings\n  getUserBookings: () => api.get('/bookings/user'),\n  // Get all bookings (admin only)\n  getAllBookings: () => api.get('/bookings'),\n  // Update booking status (admin only)\n  updateBookingStatus: (id, status) => api.put(`/bookings/${id}/status`, {\n    status\n  }),\n  // Cancel booking\n  cancelBooking: id => api.put(`/bookings/${id}/cancel`),\n  // Get booking by ID\n  getBookingById: id => api.get(`/bookings/${id}`)\n};\n\n// User APIs\nexport const userAPI = {\n  // Register user\n  register: userData => api.post('/users/register', userData),\n  // Login user\n  login: credentials => api.post('/users/login', credentials),\n  // Get user profile\n  getProfile: () => api.get('/users/profile'),\n  // Update user profile\n  updateProfile: userData => api.put('/users/profile', userData),\n  // Get all users (admin only)\n  getAllUsers: () => api.get('/users'),\n  // Delete user (admin only)\n  deleteUser: id => api.delete(`/users/${id}`)\n};\n\n// Admin APIs\nexport const adminAPI = {\n  // Admin login\n  login: credentials => api.post('/admin/login', credentials),\n  // Get admin profile\n  getProfile: () => api.get('/admin/profile'),\n  // Dashboard stats\n  getDashboardStats: () => api.get('/admin/dashboard/stats')\n};\n\n// Gallery APIs\nexport const galleryAPI = {\n  // Get all gallery images\n  getAllImages: () => api.get('/gallery'),\n  // Upload new image (admin only)\n  uploadImage: formData => api.post('/gallery', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  // Delete image (admin only)\n  deleteImage: id => api.delete(`/gallery/${id}`),\n  // Update image (admin only)\n  updateImage: (id, imageData) => api.put(`/gallery/${id}`, imageData)\n};\n\n// Auth utilities\nexport const authUtils = {\n  getToken: () => localStorage.getItem('token'),\n  setToken: token => localStorage.setItem('token', token),\n  removeToken: () => localStorage.removeItem('token'),\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    return !!token; // Convert to boolean\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","roomAPI","getAllRooms","get","getRoomById","id","createRoom","roomData","post","updateRoom","put","deleteRoom","delete","getAvailableRooms","checkIn","checkOut","bookingAPI","createBooking","bookingData","getUserBookings","getAllBookings","updateBookingStatus","cancelBooking","getBookingById","userAPI","register","userData","login","credentials","getProfile","updateProfile","getAllUsers","deleteUser","adminAPI","getDashboardStats","galleryAPI","getAllImages","uploadImage","formData","deleteImage","updateImage","imageData","authUtils","getToken","setToken","setItem","removeToken","isAuthenticated"],"sources":["C:/Users/DELL/Desktop/Yasin Heaven Star Hotel/Frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/admin/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Room APIs\nexport const roomAPI = {\n  // Get all rooms\n  getAllRooms: () => api.get('/rooms'),\n  \n  // Get room by ID\n  getRoomById: (id) => api.get(`/rooms/${id}`),\n  \n  // Create new room (admin only)\n  createRoom: (roomData) => api.post('/rooms', roomData),\n  \n  // Update room (admin only)\n  updateRoom: (id, roomData) => api.put(`/rooms/${id}`, roomData),\n  \n  // Delete room (admin only)\n  deleteRoom: (id) => api.delete(`/rooms/${id}`),\n  \n  // Get available rooms for dates\n  getAvailableRooms: (checkIn, checkOut) => \n    api.get(`/rooms?checkIn=${checkIn}&checkOut=${checkOut}`),\n};\n\n// Booking APIs\nexport const bookingAPI = {\n  // Create new booking\n  createBooking: (bookingData) => api.post('/bookings', bookingData),\n  \n  // Get user bookings\n  getUserBookings: () => api.get('/bookings/user'),\n  \n  // Get all bookings (admin only)\n  getAllBookings: () => api.get('/bookings'),\n  \n  // Update booking status (admin only)\n  updateBookingStatus: (id, status) => \n    api.put(`/bookings/${id}/status`, { status }),\n  \n  // Cancel booking\n  cancelBooking: (id) => api.put(`/bookings/${id}/cancel`),\n  \n  // Get booking by ID\n  getBookingById: (id) => api.get(`/bookings/${id}`),\n};\n\n// User APIs\nexport const userAPI = {\n  // Register user\n  register: (userData) => api.post('/users/register', userData),\n  \n  // Login user\n  login: (credentials) => api.post('/users/login', credentials),\n  \n  // Get user profile\n  getProfile: () => api.get('/users/profile'),\n  \n  // Update user profile\n  updateProfile: (userData) => api.put('/users/profile', userData),\n  \n  // Get all users (admin only)\n  getAllUsers: () => api.get('/users'),\n  \n  // Delete user (admin only)\n  deleteUser: (id) => api.delete(`/users/${id}`),\n};\n\n// Admin APIs\nexport const adminAPI = {\n  // Admin login\n  login: (credentials) => api.post('/admin/login', credentials),\n  \n  // Get admin profile\n  getProfile: () => api.get('/admin/profile'),\n  \n  // Dashboard stats\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n};\n\n// Gallery APIs\nexport const galleryAPI = {\n  // Get all gallery images\n  getAllImages: () => api.get('/gallery'),\n  \n  // Upload new image (admin only)\n  uploadImage: (formData) => \n    api.post('/gallery', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    }),\n  \n  // Delete image (admin only)\n  deleteImage: (id) => api.delete(`/gallery/${id}`),\n  \n  // Update image (admin only)\n  updateImage: (id, imageData) => api.put(`/gallery/${id}`, imageData),\n};\n\n// Auth utilities\nexport const authUtils = {\n  getToken: () => localStorage.getItem('token'),\n  setToken: (token) => localStorage.setItem('token', token),\n  removeToken: () => localStorage.removeItem('token'),\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    return !!token; // Convert to boolean\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}